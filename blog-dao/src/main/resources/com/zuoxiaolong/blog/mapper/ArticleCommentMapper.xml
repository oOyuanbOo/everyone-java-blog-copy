<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zuoxiaolong.blog.mapper.ArticleCommentMapper">
    <resultMap id="BaseResultMap" type="com.zuoxiaolong.blog.model.persistent.ArticleComment">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="web_user_id" property="webUserId" jdbcType="INTEGER"/>
        <result column="article_id" property="articleId" jdbcType="INTEGER"/>
        <result column="comment" property="comment" jdbcType="VARCHAR"/>
        <result column="reply_comment_id" property="replyCommentId" jdbcType="INTEGER"/>
        <result column="parents_comment_id" property="parentsCommentId" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, create_time, update_time, web_user_id, article_id, comment, reply_comment_id, parents_comment_id
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from article_comment
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from article_comment
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.zuoxiaolong.blog.model.persistent.ArticleComment">
        insert into article_comment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="webUserId != null">
                web_user_id,
            </if>
            <if test="articleId != null">
                article_id,
            </if>
            <if test="comment != null">
                comment,
            </if>
            <if test="replyCommentId != null">
                reply_comment_id,
            </if>
            <if test="parentsCommentId != null">
                parents_comment_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="webUserId != null">
                #{webUserId,jdbcType=INTEGER},
            </if>
            <if test="articleId != null">
                #{articleId,jdbcType=INTEGER},
            </if>
            <if test="comment != null">
                #{comment,jdbcType=VARCHAR},
            </if>
            <if test="replyCommentId != null">
                #{replyCommentId,jdbcType=INTEGER},
            </if>
            <if test="parentsCommentId != null">
                #{parentsCommentId,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.zuoxiaolong.blog.model.persistent.ArticleComment">
        update article_comment
        <set>
            <if test="webUserId != null">
                web_user_id = #{webUserId,jdbcType=INTEGER},
            </if>
            <if test="articleId != null">
                article_id = #{articleId,jdbcType=INTEGER},
            </if>
            <if test="comment != null">
                comment = #{comment,jdbcType=VARCHAR},
            </if>
            <if test="replyCommentId != null">
                reply_comment_id = #{replyCommentId,jdbcType=INTEGER},
            </if>
            <if test="parentsCommentId != null">
                parents_comment_id = #{parentsCommentId,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="getReCommentCount" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        select
        count(*)
        from article_comment
        where parents_comment_id LIKE concat('0,',concat(#{commentId,jdbcType=INTEGER},',%'))
    </select>
    <select id="getCommentByArticleID" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from article_comment
        where
        article_id = #{articleId,jdbcType=INTEGER}
        and reply_comment_id = 0
    </select>
    <select id="getReCommentByCommentId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from article_comment
        where
        parents_comment_id LIKE concat('0,',concat(#{commentId,jdbcType=INTEGER},',%'))
    </select>
</mapper>